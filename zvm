#!/bin/bash
set -e

# Define the signature key and directories
sigkey="RWSGOq2NVecA2UPNdBUZykf1CCb147pkmdtYxgb3Ti+JO/wCYvhbAb/U"
ZVM_DIR="$HOME/.zvm"
running_dir=$(sh -c "cd $(dirname $0) && pwd")
filename=zig.tar.gz
zig_download_json=https://ziglang.org/download/index.json
zls_repo=https://github.com/zigtools/zls.git

# Create the ZVM directory if it doesn't exist
if [ ! -d "$ZVM_DIR" ]; then
    mkdir -p "$ZVM_DIR"
fi

# Set up the initial PATH for .zvm/current if not already set
if ! echo "$PATH" | grep -q "$HOME/.zvm/current"; then
    echo "üîß Setting up initial PATH for .zvm/current..."

    if [ -f "$HOME/.bashrc" ]; then
        echo 'export PATH="$PATH:$HOME/.zvm/current"' >> "$HOME/.bashrc"
    fi

    if [ -f "$HOME/.zshrc" ]; then
        echo 'export PATH="$PATH:$HOME/.zvm/current"' >> "$HOME/.zshrc"
    fi

    if [ -d "$HOME/.config/fish" ]; then
        echo 'set -x PATH $PATH $HOME/.zvm/current' >> "$HOME/.config/fish/config.fish"
    fi

    echo "üîß Initial PATH setup complete."
fi

# Ensure required commands are installed
if ! command -v sha256sum &>/dev/null; then
    echo "‚ùå sha256sum could not be found. Please install it."
    exit 1
fi

if ! command -v curl &>/dev/null; then
    echo "‚ùå curl could not be found. Please install it."
    exit 1
fi

if ! command -v jq &>/dev/null; then
    echo "‚ùå jq could not be found. Please install it."
    exit 1
fi

# Function to fetch Zig versions from the Zig website
get_versions() {
    echo "üîç Fetching Zig versions..."
    json_data=$(curl -s "$zig_download_json")
}

# Function to select a Zig version
select_version() {
    echo "üìú Available versions:"
    versions=$(echo "$json_data" | jq -r 'keys[]' | sort -Vr)

    if [ -z "$versions" ]; then
        echo "‚ùå No versions found or unable to fetch versions."
        exit 1
    fi

    select version in $versions; do
        if [ -n "$version" ]; then
            echo "‚úÖ Selected version: $version"
            selected_version="$version"
            break
        else
            echo "‚ùå Invalid selection. Please try again."
        fi
    done
}

# Function to select an architecture and download the asset
download_asset() {
    local version="$1"
    local architecture="$2"

    if [ -z "$architecture" ]; then
        echo "üìú Available architectures for version $version:"
        architectures=$(echo "$json_data" | jq -r --arg version "$version" '.[$version] | to_entries[] | select(.key | test("-")) | .key')

        if [ -z "$architectures" ]; then
            echo "‚ùå No architectures found for the selected version."
            exit 1
        fi
        select a in $architectures; do
            if [ -n "$a" ]; then
                architecture="$a"
                break
            fi
        done
    fi

    if [ -n "$architecture" ]; then
        echo "‚úÖ Selected architecture: $architecture"
        asset_url=$(echo "$json_data" | jq -r --arg version "$version" --arg architecture "$architecture" '.[$version][$architecture].tarball')
        shasum=$(echo "$json_data" | jq -r --arg version "$version" --arg architecture "$architecture" '.[$version][$architecture].shasum')
        echo "‚¨áÔ∏è Downloading $architecture from $asset_url..."
        curl -L "$asset_url" -o $filename
        echo "‚úÖ Download complete."
        echo "üîç Verifying signature for $filename..."
        if [ "$(sha256sum zig.tar.gz | awk '{print $1}')" != "$shasum" ]; then
            echo "‚ùå Signature verification failed. Please try again."
            rm $filename
            exit 1
        fi
        echo "‚úÖ Signature verification successful."
    else
        echo "‚ùå Invalid selection. Please try again."
    fi
}

# Subcommands

# Function to list installed versions
list_versions() {
    local selected_version=""
    if [ -x "$ZVM_DIR/current/zig" ]; then
        selected_version=$($ZVM_DIR/current/zig version)
    fi
    local versions=$(find "$ZVM_DIR" -mindepth 1 -maxdepth 1 -type d -exec basename {} \;)

    if [ -z "$versions" ]; then
        echo "‚ùå No versions installed."
    else
        echo "üìú Installed versions:"
        for version in $versions; do
            if [ "$version" == "$selected_version" ]; then
                echo "* $version"
            else
                echo "  $version"
            fi
        done
    fi
}

# Function to remove an installed version
remove_version() {
    local version="$1"
    if [ -z "$version" ]; then
        echo "‚ùå Please provide a version to remove."
        return 1
    fi
    if [ -d "$ZVM_DIR/$version" ]; then
        echo "üóëÔ∏è Removing version $version..."
        rm -rf "$ZVM_DIR/$version"
    else
        echo "‚ùå Version $version not found."
        return 1
    fi
}

# Function to select what version to run
select_run() {
    if [ -z "$1" ]; then
        local versions=$(find "$ZVM_DIR" -mindepth 1 -maxdepth 1 -type d -exec basename {} \;)
        if [ -z "$versions" ]; then
            echo "‚ùå No versions installed."
            return 1
        fi
        select version in $versions; do
            if [ -n "$version" ]; then
                echo "‚úÖ Selected version: $version"
                export ZVM_VERSION="$version"
                break
            else
                echo "‚ùå Invalid selection. Please try again."
            fi
        done
    else
        export ZVM_VERSION="$1"
    fi

    # Remove any previous version on PATH
    grep -v "/.zvm/" "$HOME/.bashrc" > "$HOME/.bashrc.tmp"
    mv "$HOME/.bashrc.tmp" "$HOME/.bashrc"

    unlink "$HOME/.zvm/current" 2>&1 >/dev/null || true
    ln -s "$ZVM_DIR/$ZVM_VERSION" "$HOME/.zvm/current"

    echo "export PATH=\"\$PATH:\$HOME/.zvm/current\"" >> "$HOME/.bashrc"

    echo "üîß zig version"
    $HOME/.zvm/current/zig version
}

# Function to get the system architecture
get_system_architecture() {
    case "$(uname -s)-$(uname -m)" in
        Linux-x86_64) echo "x86_64-linux" ;;
        Linux-aarch64) echo "aarch64-linux" ;;
        Linux-armv7l) echo "armv7a-linux" ;;
        Linux-armv8l | Linux-arm64 | Linux-aarch64) echo "aarch64-linux" ;;
        Linux-riscv64) echo "riscv64-linux" ;;
        Linux-ppc64le) echo "powerpc64le-linux" ;;
        Linux-i686) echo "x86-linux" ;;
        Darwin-x86_64) echo "x86_64-macos" ;;
        Darwin-arm64) echo "aarch64-macos" ;;
        FreeBSD-x86_64) echo "x86_64-freebsd" ;;
        MINGW64_NT-*-x86_64) echo "x86_64-windows" ;;
        MINGW32_NT-*-i686) echo "x86-windows" ;;
        *) echo "‚ùå Unsupported architecture"; exit 1 ;;
    esac
}

# Function to install a new version
install_version() {
    get_versions

    local version="$1"
    local architecture="$2"

    if [ -z "$version" ]; then
        select_version
        version=$selected_version
    fi

    if [ -d "$ZVM_DIR/$version" ]; then
        echo "‚ùå Version $version already installed."
        return 1
    fi

    if [ -z "$architecture" ]; then
        architecture=$(get_system_architecture)
        echo "üîç Detected system architecture: $architecture"
    fi

    download_asset "$version" $architecture

    mkdir -p "$ZVM_DIR/$version"

    echo "üîß Extracting $filename..."
    tar -xf $filename -C "$ZVM_DIR/$version" >/dev/null
    echo "‚úÖ Extraction complete."

    extractedfolder=$(ls $ZVM_DIR/$version/)
    mv $ZVM_DIR/$version/${extractedfolder}/* $ZVM_DIR/$version/

    rm $filename
    rm -rf $extractedfolder

    echo "‚úÖ Installed version $version."
    select_run "$version"
}

# Function to print usage instructions
print_usage() {
    echo "Usage: zvm [list|remove|install|use] [version/options]"
    echo ""
    echo "Options:"
    echo "  zls         - Install zls for the current version"
    echo "  list        - List installed versions"
    echo "  remove      - Remove installed version"
    echo "  install     - Install a new version"
    echo "  use         - Select what version to run"
    echo "  versions    - Show all the versions available on zig website"
}

# Function to install zls (Zig Language Server)
zls_install() {
    local selected_version="current"
    local tag=$($ZVM_DIR/current/zig version)

    if [ -f "$ZVM_DIR/$selected_version/zls" ]; then
        echo "‚ùå zls already installed."
        return 1
    fi

    echo "üîß Installing zls..."
    cd $ZVM_DIR/$selected_version
    git clone --branch $tag $zls_repo zls_src
    cd zls_src
    zig build
    mv zig-out/bin/zls $ZVM_DIR/$selected_version/zls
    cd ../
    rm -rf zls_src
    echo "‚úÖ Installed zls."
}

# Function to switch between subcommands
switch_command() {
    case $1 in
        zls)
            shift
            zls_install $@
        ;;
        list)
            list_versions
        ;;
        remove)
            shift
            remove_version $@
        ;;
        install)
            shift
            install_version $@
        ;;
        use)
            shift
            select_run $@
        ;;
        versions)
            get_versions
            echo "$json_data" | jq -r 'keys[]' | sort -Vr
        ;;
        *)
            print_usage
            exit 1
        ;;
    esac
}

# Main entry point
if [ -z "$1" ]; then
    print_usage
    exit 1
fi

switch_command $@
